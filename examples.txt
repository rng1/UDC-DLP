prod = letrec sum : Nat -> Nat -> Nat = L n:Nat. L m:Nat. 
    if iszero n then m else succ (sum (pred n) m)
    in letrec prod : Nat -> Nat -> Nat =
            L m:Nat. L n:Nat. if iszero m then 0 else sum n (prod (pred m) n)
            in prod;;

prod 5 10;;

fact = letrec sum : Nat -> Nat -> Nat = L n:Nat. L m:Nat. 
    if iszero n then m else succ (sum (pred n) m)
    in letrec prod : Nat -> Nat -> Nat =
        L m:Nat. L n:Nat. if iszero m then 0 else sum n (prod (pred m) n)
        in letrec fact : Nat -> Nat = 
                L n:Nat. if iszero n then 1 else prod n (fact (pred n))
                in fact;;

fact 5;;

tuple = {true, {"cadena1", "cadena2"}, 3};;

tuple.2.1;;

record = {a = 1, tuple = {23, 24}, y = true};;

record.tuple.1;;

l1 = cons[Nat] 1 cons[Nat] 2 cons[Nat] 3 nil[Nat];;

l2 = cons[Nat] 4 cons[Nat] 5 nil[Nat];;

len = letrec len:List[Nat] -> Nat = Ll:List[Nat]. 
    if isnil[Nat] l then 0 
        else succ (len tail[Nat] l)
    in len;;

len l1;;

append = letrec append: List[Nat] -> List[Nat] -> List[Nat] = L l1:List[Nat]. L l2:List[Nat].
    if isnil[Nat] l1 then l2 else cons[Nat] (head[Nat] l1) (append (tail[Nat] l1) l2)
    in append;;

append l1 l2;;

f = L x:Nat. succ x;;

map = letrec map : List[Nat] -> (Nat -> Nat) -> List[Nat] = L l1:List[Nat]. L f:(Nat -> Nat). 
    if isnil[Nat] tail[Nat] l1 then cons[Nat] (f head[Nat] l1) nil[Nat]
        else cons[Nat] (f head[Nat] l1) (map tail[Nat] l1 f)
    in map;;

map l1 f;;
