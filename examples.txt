>> true;;
true : Bool

>> let x = 5 in x;;
5 : Nat

>> letrec sum : Nat -> Nat -> Nat =
    lambda n: Nat. lambda m: Nat. if iszero n then m else succ (sum (pred n) m)
    in letrec prod : Nat -> Nat -> Nat =
            L m:Nat. L n:Nat. if iszero m then 0 else sum n ( prod (pred m) n)
            in prod 5 10;;
50 : Nat

>> letrec sum : Nat -> Nat -> Nat =
    lambda n: Nat. lambda m: Nat. if iszero n then m else succ (sum (pred n) m)
    in letrec prod : Nat -> Nat -> Nat =
        lambda m:Nat. lambda n:Nat. if iszero m then 0 else sum n ( prod (pred m) n)
        in letrec factorial : Nat -> Nat = 
                lambda n: Nat. if iszero n then 1 else prod n (factorial (pred n))
                in factorial 5;;
120 : Nat

>> {true, "cadena", 3}.1;;
true : Bool

>> {true, {"cadena1", "cadena2"}, 3}.2.1;;
"cadena1" : String
